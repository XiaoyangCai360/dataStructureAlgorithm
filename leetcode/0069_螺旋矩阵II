# 59 螺旋矩阵 II 
[Leetcode 题目链接](https://leetcode.com/problems/spiral-matrix-ii/)

## 1. 题目描述
给你一个正整数`n`，生成一个包含`1`到`n^2`所有元素，且元素按顺时针顺序螺旋排列的`n`x`n`正方形矩阵`matrix`。

示例1:
```
输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]
```

示例2:
```
输入：n = 1
输出：[[1]]
```

## 2. 解题思路
* 模拟 **顺时针** 画矩阵的过程：
  * 上行 **从左到右**
  * 右列 **从上到下**
  * 下行 **从右到左**
  * 左列 **从下到上**

* 坚持**循环不变量原则**，按照**左闭右开**，拐角处留给下一条边来画
* 二维数组表示：行列式，`matrix[][]`中第一个`[]`表示 **行**，第二个`[]`表示 **列**

具体算法：
1. 初始化矩阵`matrix`为一个`n`x`n`的正方形矩阵。初始化有两种方法：`matrix = [[0] * n for i in range(n)]`或`matrix = [[0 for _ in range(n)] for _ in range(n)]`。
2. 初始化指针`left, right, up, down`，然后填充
3. 循环条件：`left`在`right`之前，`up`在`down`之上时，即`while left < right and up < down`填充矩阵
4. 分别按照先 **上行**，再 **右列**，再 **下行**，最后 **左列** 的顺序填充矩阵，填充循环条件注意保持 **左闭右开** ，然后四个指针更新，`left`向右，`right`向左，`up`向下，`down`向上
5. 最后注意，如果`n`为 **奇数** 时，此时循环条件为`left == right and up == down`，中心元素不会被填充，所以需要专门填充中心元素为`n ** 2`，需要判断中心元素的地址为`matrix[n//2][n//2]`。如果`n`为偶数，不存在中心元素，所以没有问题。


```
class Solution(object):
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """

        matrix = [[0] * n for i in range(n)] # 初始化 matrix
        left, right, up, down = 0, n - 1, 0, n - 1 # 初始化四个定位指针
        num = 1 # 填充的数从1开始

        # 开始填充矩阵
        while left < right and up < down:
            # 上行从左到右
            for i in range(left, right): # [0, n-1)，拐角交给下一个
                matrix[up][i] = num
                num += 1

            # 右列从上到下
            for j in range(up, down): # [0, n-1)，拐角交给下一个
                matrix[j][right] = num
                num += 1
            
            # 下行从右到左
            for k in range(right, left, -1): # [n-1, 0)，拐角交给下一个
                matrix[down][k] = num
                num += 1

            # 左列从下到上
            for l in range(down, up, -1): # [n-1, 0)
                matrix[l][left] = num
                num += 1
            
            # 按顺序填充一遍后，更新指针，继续遍历
            left += 1 # left 向右
            right -= 1 # right 向左
            up += 1 # up 向下
            down -= 1 # down 向上
        
        # 最后判断n是否为奇数，填充中心元素
        if n % 2 != 0:
            matrix[n // 2][n // 2] = n ** 2

        return matrix
```

* 时间复杂度：`O(n ^ 2)` 遍历二维数组
* 空间复杂度：`O(n)`